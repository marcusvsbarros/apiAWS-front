name: Build and Deploy React App

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      VITE_EC2_API_URL: ${{ secrets.VITE_EC2_API_URL }}

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      repo_name: ${{ steps.define_repo_name.outputs.repo_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Install dependencies
        run: npm install --force

      - name: Install semver
        run: npm install -g semver

      - name: Create initial tag if not exists
        id: create_initial_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          else
            echo "Tag v0.0.0 already exists."
          fi

      - name: Calculate version
        id: version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi
          echo "Last tag: $LAST_TAG"
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi
          MAJOR=0
          MINOR=0
          PATCH=0
          for COMMIT in "$COMMITS"; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
            fi
          done
          CURRENT_VERSION=${LAST_TAG#v}
          NEW_VERSION=$CURRENT_VERSION
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          fi
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" == "$NEW_VERSION" ]; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Define repository name
        id: define_repo_name
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          REPO_NAME="${REPO_NAME,,}"
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Create repository on DockerHub if needed
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u $DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN \
            "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/${{ steps.define_repo_name.outputs.repo_name }}/")
          if [ "$RESPONSE" -eq 404 ]; then
            curl -s -X POST -u $DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN \
              -H "Content-Type: application/json" \
              -d '{"name": "'${{ steps.define_repo_name.outputs.repo_name }}'", "is_private": true}' \
              "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/"
          fi

      - name: Build Docker image
        if: steps.version.outputs.should_deploy == 'true'
        run: |
          docker build --build-arg VITE_EC2_API_URL=${{ env.VITE_EC2_API_URL }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.define_repo_name.outputs.repo_name }}:${{ steps.version.outputs.new_version }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.define_repo_name.outputs.repo_name }}:${{ steps.version.outputs.new_version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.define_repo_name.outputs.repo_name }}:latest

      - name: Push Docker image
        if: steps.version.outputs.should_deploy == 'true'
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.define_repo_name.outputs.repo_name }}:${{ steps.version.outputs.new_version }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.define_repo_name.outputs.repo_name }}:latest

      - name: Update package.json version
        if: steps.version.outputs.should_deploy == 'true'
        run: npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version

      - name: Commit version bump
        if: steps.version.outputs.should_deploy == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add package.json
          git commit -m "chore(release): version ${{ steps.version.outputs.new_version }}"
          git tag v${{ steps.version.outputs.new_version }}
          git push origin main --tags

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            REPO_NAME="${{ needs.build.outputs.repo_name }}"
            REPO_NAME="${REPO_NAME,,}"
            VERSION="${{ needs.build.outputs.new_version }}"
            IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:$VERSION"
            echo "üîÑ Deploying image: $IMAGE"

            # Start Docker service
            sudo systemctl start docker || sudo service docker start

            # Stop and remove existing container
            CONTAINER_ID=$(sudo docker ps -aq --filter "name=^/${REPO_NAME}$")
            if [ -n "$CONTAINER_ID" ]; then
              echo "üõë Removing existing container..."
              sudo docker rm -f $REPO_NAME || true
            fi

            # Remove old image if exists
            sudo docker rmi -f "$IMAGE" || echo "‚ÑπÔ∏è No old image"

            # Pull new image
            sudo docker pull $IMAGE

            # Start container
            sudo docker run -d -p 3000:80 --name $REPO_NAME $IMAGE
