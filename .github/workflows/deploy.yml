name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  REPO_NAME: apiaws-front

jobs:
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}
          tags: |
            type=raw,value=0.0.0
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_PRIVATE_KEY }}
          script: |
            REPO_NAME="apiaws-front"
            REPO_NAME="${REPO_NAME,,}"
            VERSION="latest"
            IMAGE="${{ env.DOCKERHUB_USERNAME }}/$REPO_NAME:$VERSION"

            echo "üîÑ Deploying image: $IMAGE"

            # Start Docker
            sudo systemctl start docker || sudo service docker start

            # Stop and remove existing container
            CONTAINER_ID=$(sudo docker ps -aq --filter "name=^/${REPO_NAME}$")
            if [ -n "$CONTAINER_ID" ]; then
              echo "üõë Removing existing container..."
              sudo docker rm -f $REPO_NAME || true
            fi

            # Remove old image
            sudo docker rmi -f "$IMAGE" || echo "‚ÑπÔ∏è No old image"

            # Pull new image
            sudo docker pull $IMAGE

            # Run container
            sudo docker run -d -p 3000:80 --name $REPO_NAME $IMAGE
