name: Build and Deploy

on:
  push:
    branches:
      - main

env:
  REPO_NAME: apiaws-front
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # importante para pegar todas as tags e hist√≥rico completo

      - name: Fetch all tags
        run: git fetch --tags

      - name: Calculate new version
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "√öltima tag encontrada: $LAST_TAG"

          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          MAJOR=0
          MINOR=0
          PATCH=0

          for COMMIT in $COMMITS; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
            fi
          done

          CURRENT_VERSION=${LAST_TAG#v}
          NEW_VERSION=$CURRENT_VERSION

          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(npx semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(npx semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(npx semver -i patch $CURRENT_VERSION)
          fi

          if [ -z "$NEW_VERSION" ]; then
            echo "‚ùå ERROR: VERSION n√£o foi calculada. Abortando."
            exit 1
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          docker build -t $DOCKERHUB_USERNAME/$REPO_NAME:$VERSION .
          docker tag $DOCKERHUB_USERNAME/$REPO_NAME:$VERSION $DOCKERHUB_USERNAME/$REPO_NAME:latest
        env:
          DOCKERHUB_USERNAME: ${{ env.DOCKERHUB_USERNAME }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker images
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          docker push $DOCKERHUB_USERNAME/$REPO_NAME:$VERSION
          docker push $DOCKERHUB_USERNAME/$REPO_NAME:latest
        env:
          DOCKERHUB_USERNAME: ${{ env.DOCKERHUB_USERNAME }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_PRIVATE_KEY }}
          script: |
            REPO_NAME="$REPO_NAME"
            VERSION="${{ steps.version.outputs.new_version }}"
            IMAGE="$DOCKERHUB_USERNAME/$REPO_NAME:$VERSION"

            echo "üîÑ Iniciando deploy da imagem: $IMAGE"

            sudo yum update -y || sudo apt update -y
            sudo systemctl start docker || sudo service docker start

            echo "üõë Removendo container antigo (se existir)..."
            docker rm -f $REPO_NAME || echo "‚úîÔ∏è Nenhum container antigo para remover"

            echo "üßπ Removendo imagem local antiga (se existir)..."
            docker rmi -f "$IMAGE" || echo "‚úîÔ∏è Nenhuma imagem antiga encontrada com a tag: $IMAGE"

            echo "‚¨áÔ∏è Baixando nova imagem..."
            docker pull $IMAGE

            echo "üöÄ Subindo novo container..."
            docker run -d -p 3000:80 --name $REPO_NAME $IMAGE
