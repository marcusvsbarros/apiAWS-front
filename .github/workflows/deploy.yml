name: Build and Deploy React App

on:
  push:
    branches: [main]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      repo_name: ${{ steps.define_repo_name.outputs.repo_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Instalar depend√™ncias
        run: npm install --force

      - name: Instalar semver
        run: npm install -g semver

      - name: Criar nova tag inicial se n√£o existir
        id: create_initial_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          else
            echo "Tag inicial j√° existe."
          fi

      - name: Calcular nova vers√£o
        id: version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi

          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          MAJOR=0
          MINOR=0
          PATCH=0

          for COMMIT in $COMMITS; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
            fi
          done

          CURRENT_VERSION=${LAST_TAG#v}
          NEW_VERSION=$CURRENT_VERSION
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Validar vers√£o calculada
        run: |
          if [ -z "${{ steps.version.outputs.new_version }}" ]; then
            echo "‚ùå ERROR: VERSION not calculated. Check your commit messages."
            exit 1
          fi
          echo "‚úÖ VERSION resolved: ${{ steps.version.outputs.new_version }}"

      - name: Definir nome do reposit√≥rio
        id: define_repo_name
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          REPO_NAME="${REPO_NAME,,}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Buildar imagem Docker
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          docker build -t $DOCKERHUB_USERNAME/$REPO_NAME:$VERSION .
          docker tag $DOCKERHUB_USERNAME/$REPO_NAME:$VERSION $DOCKERHUB_USERNAME/$REPO_NAME:latest

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push da imagem Docker
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          docker push $DOCKERHUB_USERNAME/$REPO_NAME:$VERSION
          docker push $DOCKERHUB_USERNAME/$REPO_NAME:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH no EC2
        uses: appleboy/ssh-action@v0.1.5
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          REPO_NAME: ${{ needs.build.outputs.repo_name }}
          VERSION: ${{ needs.build.outputs.new_version }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            if [ -z "$VERSION" ]; then
              echo "‚ùå ERROR: VERSION is empty. Aborting deploy."
              exit 1
            fi

            IMAGE="$DOCKERHUB_USERNAME/$REPO_NAME:$VERSION"
            echo "üîÑ Iniciando deploy da imagem: $IMAGE"

            sudo yum update -y || sudo apt update -y
            sudo systemctl start docker || sudo service docker start

            echo "üõë Removendo container antigo (se existir)..."
            docker rm -f $REPO_NAME || echo "‚úîÔ∏è Nenhum container antigo para remover"

            echo "üßπ Removendo imagem local antiga (se existir)..."
            docker rmi -f "$IMAGE" || echo "‚úîÔ∏è Nenhuma imagem antiga encontrada com a tag: $IMAGE"

            echo "‚¨áÔ∏è Baixando nova imagem..."
            docker pull $IMAGE

            echo "üöÄ Subindo novo container..."
            docker run -d -p 3000:80 --name $REPO_NAME $IMAGE
