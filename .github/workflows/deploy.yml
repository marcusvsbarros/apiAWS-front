name: Build and Deploy React App

on:
  push:
    branches: [main]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  VITE_EC2_API_URL: ${{ secrets.VITE_EC2_API_URL }}

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      repo_name: ${{ steps.define_repo_name.outputs.repo_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Instalar dependências
        run: npm install --force

      - name: Instalar semver
        run: npm install -g semver

      - name: Criar nova tag inicial se não existir
        id: create_initial_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          else
            echo "Tag inicial já existe."
          fi

      - name: Calcular nova versão
        id: version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi
          echo "Última tag: $LAST_TAG"

          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          MAJOR=0
          MINOR=0
          PATCH=0

          for COMMIT in $COMMITS; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
            fi
          done

          CURRENT_VERSION=${LAST_TAG#v}
          NEW_VERSION=$CURRENT_VERSION
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          fi

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Definir nome do repositório
        id: define_repo_name
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          REPO_NAME="${REPO_NAME,,}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Criar repositório no Docker Hub se não existir
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          REPO_NAME: ${{ env.REPO_NAME }}
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u $DOCKERHUB_USERNAME:$DOCKERHUB_PASSWORD "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/$REPO_NAME/")
          if [ "$RESPONSE" -eq 404 ]; then
            echo "Repositório não existe. Criando..."
            curl -s -X POST -u $DOCKERHUB_USERNAME:$DOCKERHUB_PASSWORD \
              -H "Content-Type: application/json" \
              -d "{\"name\": \"$REPO_NAME\", \"is_private\": true}" \
              "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/"
            echo "Repositório criado!"
          else
            echo "Repositório já existe."
          fi

      - name: Inserir versão no frontend
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          FILE="src/App.tsx"
          if grep -q '</Routes>' "$FILE"; then
            sed -i "/<\/Routes>/a\\
            <div className=\"text-sm italic text-center mt-4 text-gray-500\">Versão: $VERSION</div>" "$FILE"
          fi

      - name: Buildar imagem Docker
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          docker build --build-arg VITE_EC2_API_URL=${{ env.VITE_EC2_API_URL }} -t ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:$VERSION .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:$VERSION ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:latest

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push da imagem Docker
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:latest

      - name: Atualizar versão no package.json
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          npm version $VERSION --no-git-tag-version

      - name: Commit e push versão
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add package.json
          git commit -m "chore(release): version $VERSION" || echo "No changes to commit"
          git tag v$VERSION || echo "Tag já existe"
          git push origin main --tags || echo "Push falhou"

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy via SSH no EC2
        uses: appleboy/ssh-action@v0.1.5
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          REPO_NAME: ${{ needs.build.outputs.repo_name }}
          VERSION: ${{ needs.build.outputs.new_version }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            IMAGE="$DOCKERHUB_USERNAME/$REPO_NAME:$VERSION"
            echo "Login no Docker Hub..."
            echo "$DOCKERHUB_PASSWORD" | sudo docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "Iniciando serviço Docker..."
            sudo systemctl start docker || sudo service docker start
            CONTAINER_ID=$(sudo docker ps -aq --filter "name=^/${REPO_NAME}$")
            if [ -n "$CONTAINER_ID" ]; then
              echo "Parando container antigo..."
              sudo docker rm -f $REPO_NAME
            fi
            echo "Removendo imagem antiga..."
            sudo docker rmi -f "$IMAGE" || true
            echo "Puxando nova imagem..."
            sudo docker pull "$IMAGE"
            echo "Rodando container..."
            sudo docker run -d -p 3000:80 --name $REPO_NAME "$IMAGE"
