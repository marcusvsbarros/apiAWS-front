name: Build and Deploy React App

on:
  push:
    branches: [main]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      repo_name: ${{ steps.define_repo_name.outputs.repo_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: npm install --force

      - name: Install semver
        run: npm install -g semver

      - name: Create initial tag if none exists
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          fi

      - name: Calculate new version
        id: version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi
          echo "Last tag: $LAST_TAG"

          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          MAJOR=0
          MINOR=0
          PATCH=0

          for COMMIT in $COMMITS; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
            fi
          done

          CURRENT_VERSION=${LAST_TAG#v}
          NEW_VERSION=$CURRENT_VERSION
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          fi

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Define repository name
        id: define_repo_name
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          REPO_NAME="${REPO_NAME,,}"
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Create Docker Hub repository if missing
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u $DOCKERHUB_USERNAME:$DOCKER_PASSWORD "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/$REPO_NAME/")
          if [ "$RESPONSE" -eq 404 ]; then
            echo "Repository not found. Creating..."
            curl -s -X POST -u $DOCKERHUB_USERNAME:$DOCKERHUB_PASSWORD \
              -H "Content-Type: application/json" \
              -d "{\"name\": \"$REPO_NAME\", \"is_private\": true}" \
              "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/"
            echo "Repository created!"
          else
            echo "Repository already exists."
          fi

      - name: Build Docker image
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          docker build -t $DOCKERHUB_USERNAME/$REPO_NAME:$VERSION .
          docker tag $DOCKERHUB_USERNAME/$REPO_NAME:$VERSION $DOCKERHUB_USERNAME/$REPO_NAME:latest

      - name: Docker Hub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          docker push $DOCKERHUB_USERNAME/$REPO_NAME:$VERSION
          docker push $DOCKERHUB_USERNAME/$REPO_NAME:latest

      - name: Update package.json version
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          npm version $VERSION --no-git-tag-version

      - name: Commit and push version
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add package.json
          git commit -m "chore(release): version $VERSION" || echo "No changes to commit"
          git tag v$VERSION || echo "Tag already exists"
          git push origin main --tags || echo "Push failed"

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy via SSH to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,DOCKER_PASSWORD,REPO_NAME,VERSION
          script: |
            IMAGE="$DOCKERHUB_USERNAME/$REPO_NAME:$VERSION"
            echo "Logging in to Docker Hub..."
            echo "$DOCKER_PASSWORD" | sudo docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "Starting Docker service..."
            sudo systemctl start docker || sudo service docker start
            CONTAINER_ID=$(sudo docker ps -aq --filter "name=^/${REPO_NAME}$")
            if [ -n "$CONTAINER_ID" ]; then
              echo "Stopping old container..."
              sudo docker rm -f $REPO_NAME
            fi
            echo "Removing old image..."
            sudo docker rmi -f "$IMAGE" || true
            echo "Pulling new image..."
            sudo docker pull "$IMAGE"
            echo "Running new container..."
            sudo docker run -d -p 3000:80 --name $REPO_NAME "$IMAGE"
